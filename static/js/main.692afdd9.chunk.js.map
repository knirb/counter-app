{"version":3,"sources":["components/navBar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","value","classes","React","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAiBeA,G,MAbA,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACf,OACE,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,SACE,0BAAMD,UAAY,wCACfD,OCyBYG,E,uKA9BV,IAAD,OACR,OACE,6BACE,0BAAMF,UAAWG,KAAKC,mBAAoBD,KAAKE,eAC/C,4BAAQC,QAAS,kBAAM,EAAKC,MAAMC,YAAY,EAAKD,MAAME,UACzDT,UAAY,4BADZ,aAEA,4BACEM,QAAU,kBAAM,EAAKC,MAAMG,SAAS,EAAKH,MAAME,QAAQE,KACzDX,UAAY,6BAFZ,a,oCAae,IACTY,EAAST,KAAKI,MAAME,QAApBG,MACN,OAAiB,IAAVA,EAAc,OAAQA,I,wCAG7B,IAAIC,EAAU,mBAEd,OADAA,GAAwC,IAA7BV,KAAKI,MAAME,QAAQG,MAAc,UAAY,c,GA1B1CE,IAAMC,WCqBbC,E,uKApBF,IAAD,EAE2Cb,KAAKI,MAAjDU,EAFC,EAEDA,QAASC,EAFR,EAEQA,SAAUR,EAFlB,EAEkBA,SAAUF,EAF5B,EAE4BA,YAEpC,OACA,6BACE,4BAAQF,QAASW,EAASjB,UAAY,8BAAtC,SACCkB,EAASC,KAAI,SAAAV,GAAO,OACnB,kBAAC,EAAD,CACEW,IAAKX,EAAQE,GACbD,SAAUA,EACVF,YAAaA,EACbC,QAAWA,Y,GAbEK,IAAMC,WCoDdM,E,4MAhDbC,MAAO,CACLJ,SAAU,CACR,CAACP,GAAI,EAAGC,MAAO,GACf,CAACD,GAAI,EAAGC,MAAO,GACf,CAACD,GAAI,EAAGC,MAAO,GACf,CAACD,GAAI,EAAGC,MAAO,K,EAMnBW,gBAAkB,SAACd,GACjB,IAAMS,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BM,EAAQN,EAASO,QAAQhB,GAE/BS,EAASM,GAAOZ,QAChB,EAAKc,SAAS,CAACR,c,EAGjBS,YAAc,WACZ,IAAMT,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAAAS,GAEvC,OADAA,EAAEhB,MAAQ,EACHgB,KAET,EAAKF,SAAS,CAACR,c,EAGjBW,aAAe,SAACC,GACd,IAAMZ,EAAW,EAAKI,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAIA,EAAEjB,KAAOmB,KAC1D,EAAKJ,SAAS,CAACR,c,uDAIjB,OACE,kBAAC,IAAMc,SAAP,KACE,kBAAC,EAAD,CAAQjC,cAAeI,KAAKmB,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAIA,EAAEhB,MAAO,KAAGqB,SACnE,0BAAMjC,UAAY,aAChB,kBAAC,EAAD,CACEkB,SAAUf,KAAKmB,MAAMJ,SACrBD,QAASd,KAAKwB,YACdnB,YAAaL,KAAKoB,gBAClBb,SAAYP,KAAK0B,qB,GA3CTf,IAAMC,WCOJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.692afdd9.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Stateless functional component\r\nconst NavBar = ({totalCounters}) => {\r\n  return(\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">Navbar\r\n        <span className = 'badge badge-pill badge-secondary m-2'>\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\n\r\nexport default NavBar;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Counter extends React.Component {\r\n  render () {\r\n    return(\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button onClick={() => this.props.onIncrement(this.props.counter)}\r\n        className = 'btn btn-secondary btn-sm'>Increment</button>\r\n        <button\r\n          onClick ={() => this.props.onDelete(this.props.counter.id)}\r\n        className = 'btn btn-danger btn-sm m-2'>\r\n          Delete\r\n        </button>\r\n\r\n        {/*<img src={this.state.imageURL} alt=''/>*/}\r\n        {/*{this.state.tags.length === 0 && 'Please create a new tag!'}\r\n        {this.renderTags()}*/}\r\n\r\n    </div>)\r\n        }\r\n\r\n        formatCount() {\r\n        const{value} = this.props.counter;\r\n        return value === 0 ? 'Zero': value;\r\n        }\r\n        getBadgeClasses(){\r\n        let classes = 'badge m-2 badge-';\r\n        classes += this.props.counter.value === 0 ? 'warning' : 'primary';\r\n        return classes;\r\n        }\r\n        }\r\n\r\n        export default Counter;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Counter from './counter'\r\nclass Counters extends React.Component {\r\n  render () {\r\n\r\n    const {onReset, counters, onDelete, onIncrement} = this.props\r\n\r\n    return(\r\n    <div>\r\n      <button onClick={onReset} className = 'btn btn-primary btn-sm m-2'>Reset</button>\r\n      {counters.map(counter => //for each counter in counters\r\n        <Counter\r\n          key={counter.id} //used internally by react\r\n          onDelete={onDelete}\r\n          onIncrement={onIncrement}\r\n          counter = {counter}>\r\n        </Counter>)}\r\n    </div>\r\n\r\n      );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/navBar'\nimport Counters from './components/counters'\n\nclass App extends React.Component {\n\n  state ={ //state is internal, only this component can access\n    counters: [\n      {id: 1, value: 4},\n      {id: 2, value: 0},\n      {id: 3, value: 0},\n      {id: 4, value: 0}\n    ]\n  };\n\n\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters] //clones counters\n    const index = counters.indexOf(counter)\n    //counters[index]={...counter}\n    counters[index].value++;\n    this.setState({counters})\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    })\n    this.setState({counters});\n  };\n\n  handleDelete = (counterId) =>{\n    const counters = this.state.counters.filter(c => c.id !== counterId)\n    this.setState({counters});\n  };\n\n  render(){\n  return (\n    <React.Fragment>\n      <NavBar totalCounters={this.state.counters.filter(c => c.value >0).length}/>\n      <main className = 'container'>\n        <Counters\n          counters={this.state.counters}\n          onReset={this.handleReset}\n          onIncrement={this.handleIncrement}\n          onDelete = {this.handleDelete} />\n      </main>\n    </React.Fragment>\n  );\n\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}